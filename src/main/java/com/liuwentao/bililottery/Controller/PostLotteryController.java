package com.liuwentao.bililottery.Controller;import com.liuwentao.bililottery.Entity.AllBiliWrapper;import com.liuwentao.bililottery.Entity.BiliWrapper;import com.liuwentao.bililottery.Entity.LotteryResultWrapper;import com.liuwentao.bililottery.Service.BiliWrapperService;import com.liuwentao.bililottery.Service.IGlobalCache;import com.liuwentao.bililottery.Service.PostLotteryService;import com.liuwentao.bililottery.util.ResultWrapper;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import java.util.List;/** * Created by liuwentao on 2021/9/18 19:30 */@Slf4j@Controller@ResponseBodypublic class PostLotteryController {    @Autowired    private BiliWrapperService biliWrapperService;    @Autowired    IGlobalCache iGlobalCache;    // 获取某个人所有 已开奖/未开奖 信息，返回给my界面    @RequestMapping(value = "/api/getAllLottery", method = RequestMethod.POST)    public ResultWrapper<AllBiliWrapper> getAllLottery(@RequestParam("session") String session) {        // 根据session去redis获取openId        log.info("前端传来的session：" + session);        if (!iGlobalCache.hasKey(session)) {            log.info("前端传来的session不存在或已过期"); // 4表示：session不存在或已过期            return ResultWrapper.<AllBiliWrapper>builder().code(4).count(0).msg("session不存在或已过期，请先登录").build();        }        String openId = iGlobalCache.get(session).toString();        List<BiliWrapper> lotteryHaveBeenDrawn = biliWrapperService.findLotteryHaveBeenDrawnByOpenId(openId);        List<BiliWrapper> lotteryNotDrawYet = biliWrapperService.findLotteryNotDrawYetByOpenId(openId);        AllBiliWrapper allBiliWrapper = AllBiliWrapper.builder().lotteryHaveBeenDrawn(lotteryHaveBeenDrawn).lotteryNotDrawYet(lotteryNotDrawYet).build();        // @Builder注解的泛型类构建        return ResultWrapper.<AllBiliWrapper>builder().code(0).data(allBiliWrapper).msg("成功获取该用户发起的所有抽奖记录").count(1).build();    }}